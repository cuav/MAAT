using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace MegaTracker
{
    public partial class GLCD : UserControl
    {
        Bitmap img = new Bitmap(159, 128);
        Graphics g;
        Pen pen;
        Brush bgbrush;
        Brush fgbrush;

        public GLCD()
        {
            InitializeComponent();
            g = Graphics.FromImage(img);
            pictureBox1.Image = img;
            pen = new Pen(Color.White);
            bgbrush = new SolidBrush(Color.Blue);
            fgbrush = new SolidBrush(Color.White);
        }

        public void ClearScreen()
        {
            g.FillRectangle(bgbrush, 0, 0, img.Width, img.Height);
        }

        public void DrawLine(int x1, int y1, int x2, int y2)
        {
            g.DrawLine(pen, x1, y1, x2, y2);
        }

        public void DrawHLine(int x, int y, int width)
        {
            g.DrawLine(pen, x, y, x + width, y);
        }

        public void DrawVLine(int x, int y, int height)
        {
            g.DrawLine(pen, x, y, x, y + height);
        }

        public void DrawHParallel(int x, int y, int width, int interval, int count)
        {
            for (int i = 0; i < count; i++)
            {
                DrawHLine(x, y, width);
                y += interval;
            }
        }

        public void DrawVParallel(int x, int y, int height, int interval, int count)
        {
            for (int i = 0; i < count; i++)
            {
                DrawVLine(x, y, height);
                x += interval;
            }
        }

        public void DrawRectange(int x, int y, int width, int height)
        {
            g.DrawRectangle(pen, x, y, width, height);
        }

        public void FillRectange(int x, int y, int width, int height, Color color)
        {
            g.FillRectangle(new SolidBrush(color), x, y, width, height);
        }

        public void DrawString(int x, int y, string str)
        {
            byte[] bytes = Encoding.ASCII.GetBytes(str);
            for (int i = 0; i < str.Length; i++)
                DrawChar(x + i * 6, y, bytes[i]);
        }

        public unsafe void DrawString(int x, int y, byte* str)
        {
            for (int i = 0; *str != 0; str++, i++)
                DrawChar(x + i * 6, y, *str);
        }

        public void DrawChar(int x, int y, byte ch)
        {
            if (ch < 0xf0)
            {
                if (ch < System5x7[4] || ch >= System5x7[4] + System5x7[5])
                    return;

                int idx = (ch - System5x7[4]) * System5x7[2] + 6;

                for (int i = 0; i < System5x7[2] && x + i < img.Width; i++)
                {
                    for (int j = 0; j < System5x7[3] && y + j < img.Height; j++)
                    {

                        img.SetPixel(x + i, y + j, (System5x7[idx + i] & (1 << j)) > 0 ? Color.White : Color.Blue);
                    }
                }
            }
            else
            {
                if (ch < System11x15[4] || ch >= System11x15[4] + System11x15[5])
                    return;
                int idx = (ch - System11x15[4]) * 22 + 6;

                for (int i = 0; i < 11 && x + i < img.Width; i++)
                {
                    int pattern = ((System11x15[idx + 2 * i + 1] << 8) | System11x15[idx + 2 * i]);
                    for (int j = 0; j < 15 && y + j < img.Height; j++)
                    {
                        img.SetPixel(x + i, y + j, (pattern & (1 << j)) > 0 ? Color.White : Color.Blue);
                    }
                }
            }
        }



        private void GLCD_Load(object sender, EventArgs e)
        {
            ClearScreen();
            //DrawString(0, 0, "this is a test");
        }


        static byte[] System11x15 =
        {
            0x0, 0x0,
            11, 15,
            0xF0,
            1,
            0x0e, 0x00, 0x39, 0x40, 0xe1, 0x61, 0xc2, 0x71, 0xc2, 0x7f,
            0x24, 0x73, 0x18, 0x62, 0x18, 0x46, 0x26, 0x04, 0xc6, 0x04,
            0x00, 0x03,
        };

        static byte[] System5x7 =
        {
            0x0, 0x0, // size of zero indicates fixed width font, actual length is width * height
    0x05, // width
    0x07, // height
    0x20, // first char
    0x63, // char count

    // Fixed width; char width table not used !!!!

    // font data
    0x00, 0x00, 0x00, 0x00, 0x00,// (space)
    0x00, 0x00, 0x5F, 0x00, 0x00,// !
    0x00, 0x07, 0x00, 0x07, 0x00,// "
    0x14, 0x7F, 0x14, 0x7F, 0x14,// #
    0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
    0x23, 0x13, 0x08, 0x64, 0x62,// %
    0x36, 0x49, 0x55, 0x22, 0x50,// &
    0x00, 0x05, 0x03, 0x00, 0x00,// '
    0x00, 0x1C, 0x22, 0x41, 0x00,// (
    0x00, 0x41, 0x22, 0x1C, 0x00,// )
    0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
    0x08, 0x08, 0x3E, 0x08, 0x08,// +
    0x00, 0x50, 0x30, 0x00, 0x00,// ,
    0x08, 0x08, 0x08, 0x08, 0x08,// -
    0x00, 0x60, 0x60, 0x00, 0x00,// .
    0x20, 0x10, 0x08, 0x04, 0x02,// /
    0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
    0x00, 0x42, 0x7F, 0x40, 0x00,// 1
    0x42, 0x61, 0x51, 0x49, 0x46,// 2
    0x21, 0x41, 0x45, 0x4B, 0x31,// 3
    0x18, 0x14, 0x12, 0x7F, 0x10,// 4
    0x27, 0x45, 0x45, 0x45, 0x39,// 5
    0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
    0x01, 0x71, 0x09, 0x05, 0x03,// 7
    0x36, 0x49, 0x49, 0x49, 0x36,// 8
    0x06, 0x49, 0x49, 0x29, 0x1E,// 9
    0x00, 0x36, 0x36, 0x00, 0x00,// :
    0x00, 0x56, 0x36, 0x00, 0x00,// ;
    0x00, 0x08, 0x14, 0x22, 0x41,// <
    0x14, 0x14, 0x14, 0x14, 0x14,// =
    0x41, 0x22, 0x14, 0x08, 0x00,// >
    0x02, 0x01, 0x51, 0x09, 0x06,// ?
    0x32, 0x49, 0x79, 0x41, 0x3E,// @
    0x7E, 0x11, 0x11, 0x11, 0x7E,// A
    0x7F, 0x49, 0x49, 0x49, 0x36,// B
    0x3E, 0x41, 0x41, 0x41, 0x22,// C
    0x7F, 0x41, 0x41, 0x22, 0x1C,// D
    0x7F, 0x49, 0x49, 0x49, 0x41,// E
    0x7F, 0x09, 0x09, 0x01, 0x01,// F
    0x3E, 0x41, 0x41, 0x51, 0x32,// G
    0x7F, 0x08, 0x08, 0x08, 0x7F,// H
    0x00, 0x41, 0x7F, 0x41, 0x00,// I
    0x20, 0x40, 0x41, 0x3F, 0x01,// J
    0x7F, 0x08, 0x14, 0x22, 0x41,// K
    0x7F, 0x40, 0x40, 0x40, 0x40,// L
    0x7F, 0x02, 0x04, 0x02, 0x7F,// M
    0x7F, 0x04, 0x08, 0x10, 0x7F,// N
    0x3E, 0x41, 0x41, 0x41, 0x3E,// O
    0x7F, 0x09, 0x09, 0x09, 0x06,// P
    0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
    0x7F, 0x09, 0x19, 0x29, 0x46,// R
    0x46, 0x49, 0x49, 0x49, 0x31,// S
    0x01, 0x01, 0x7F, 0x01, 0x01,// T
    0x3F, 0x40, 0x40, 0x40, 0x3F,// U
    0x1F, 0x20, 0x40, 0x20, 0x1F,// V
    0x7F, 0x20, 0x18, 0x20, 0x7F,// W
    0x63, 0x14, 0x08, 0x14, 0x63,// X
    0x03, 0x04, 0x78, 0x04, 0x03,// Y
    0x61, 0x51, 0x49, 0x45, 0x43,// Z
    0x00, 0x00, 0x7F, 0x41, 0x41,// [
    0x02, 0x04, 0x08, 0x10, 0x20,// "\"
    0x41, 0x41, 0x7F, 0x00, 0x00,// ]
    0x04, 0x02, 0x01, 0x02, 0x04,// ^
    0x40, 0x40, 0x40, 0x40, 0x40,// _
    0x00, 0x01, 0x02, 0x04, 0x00,// `
    0x20, 0x54, 0x54, 0x54, 0x78,// a
    0x7F, 0x48, 0x44, 0x44, 0x38,// b
    0x38, 0x44, 0x44, 0x44, 0x20,// c
    0x38, 0x44, 0x44, 0x48, 0x7F,// d
    0x38, 0x54, 0x54, 0x54, 0x18,// e
    0x08, 0x7E, 0x09, 0x01, 0x02,// f
    0x08, 0x14, 0x54, 0x54, 0x3C,// g
    0x7F, 0x08, 0x04, 0x04, 0x78,// h
    0x00, 0x44, 0x7D, 0x40, 0x00,// i
    0x20, 0x40, 0x44, 0x3D, 0x00,// j
    0x00, 0x7F, 0x10, 0x28, 0x44,// k
    0x00, 0x41, 0x7F, 0x40, 0x00,// l
    0x7C, 0x04, 0x18, 0x04, 0x78,// m
    0x7C, 0x08, 0x04, 0x04, 0x78,// n
    0x38, 0x44, 0x44, 0x44, 0x38,// o
    0x7C, 0x14, 0x14, 0x14, 0x08,// p
    0x08, 0x14, 0x14, 0x18, 0x7C,// q
    0x7C, 0x08, 0x04, 0x04, 0x08,// r
    0x48, 0x54, 0x54, 0x54, 0x20,// s
    0x04, 0x3F, 0x44, 0x40, 0x20,// t
    0x3C, 0x40, 0x40, 0x20, 0x7C,// u
    0x1C, 0x20, 0x40, 0x20, 0x1C,// v
    0x3C, 0x40, 0x30, 0x40, 0x3C,// w
    0x44, 0x28, 0x10, 0x28, 0x44,// x
    0x0C, 0x50, 0x50, 0x50, 0x3C,// y
    0x44, 0x64, 0x54, 0x4C, 0x44,// z
    0x00, 0x08, 0x36, 0x41, 0x00,// {
    0x00, 0x00, 0x7F, 0x00, 0x00,// |
    0x00, 0x41, 0x36, 0x08, 0x00,// }
    0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
    0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
    0x06, 0x09, 0x09, 0x06, 0x00,//deg
    0x7f, 0x3e, 0x1c, 0x08, 0x00,//tri
    0x7f, 0x22, 0x14, 0x08, 0x00,//e-tri
};
    }
}
